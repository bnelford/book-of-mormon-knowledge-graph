name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Generate release notes
      run: |
        echo "🔍 Generating release notes..."
        python3 -c "
        import json
        from datetime import datetime
        
        # Load the knowledge graph
        with open('knowledge-graph.json', 'r') as f:
            data = json.load(f)
        
        nodes = data.get('nodes', [])
        edges = data.get('edges', [])
        
        # Count by type
        node_types = {}
        for node in nodes:
            node_type = node.get('type', 'unknown')
            node_types[node_type] = node_types.get(node_type, 0) + 1
        
        # Count relationships
        relationships = {}
        for edge in edges:
            rel_type = edge.get('label', 'unknown')
            relationships[rel_type] = relationships.get(rel_type, 0) + 1
        
        # Generate release notes
        release_notes = f'''
        # Book of Mormon Knowledge Graph Release
        
        ## 📊 Current Statistics
        - **Total Nodes:** {len(nodes)}
        - **Total Edges:** {len(edges)}
        - **Node Types:** {dict(node_types)}
        - **Relationship Types:** {len(relationships)}
        
        ## 🚀 Features
        - Interactive network visualization
        - Advanced filtering by relationship type
        - Color-coded relationships
        - Clickable scriptural references
        - Real-time search functionality
        - Responsive design for all devices
        
        ## 🛠️ Technical Details
        - Built with HTML5, CSS3, and JavaScript
        - Uses Vis.js for network visualization
        - Local development servers (Python/Node.js)
        - Comprehensive validation tools
        - AI-assisted contribution system
        
        ## 📚 Usage
        1. Clone the repository
        2. Start a local server: \`python3 server.py\` or \`node server.js\`
        3. Open http://localhost:8000/knowledge-graph.html
        4. Explore the interactive knowledge graph
        
        ## 🤝 Contributing
        We welcome contributions! See [CONTRIBUTING.md](CONTRIBUTING.md) for guidelines.
        
        ## 📄 License
        This project is licensed under the MIT License - see [LICENSE](LICENSE) for details.
        
        ---
        
        **Release Date:** {datetime.now().strftime('%Y-%m-%d')}
        '''
        
        # Write release notes to file
        with open('RELEASE_NOTES.md', 'w') as f:
            f.write(release_notes)
        
        print('✅ Release notes generated')
        "
        
    - name: Create release
      id: create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name || github.event.inputs.version }}
        release_name: Book of Mormon Knowledge Graph ${{ github.ref_name || github.event.inputs.version }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false
        
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: knowledge-graph.html
        asset_name: knowledge-graph.html
        asset_content_type: text/html
        
    - name: Upload JSON data
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: knowledge-graph.json
        asset_name: knowledge-graph.json
        asset_content_type: application/json
        
    - name: Upload validation script
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: validate.py
        asset_name: validate.py
        asset_content_type: text/x-python
        
    - name: Upload contribution template
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: contribution-template.json
        asset_name: contribution-template.json
        asset_content_type: application/json

  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Validate release assets
      run: |
        echo "🔍 Validating release assets..."
        
        # Validate JSON
        python3 validate.py
        
        # Test servers
        echo "Testing Python server..."
        timeout 10s python3 server.py &
        SERVER_PID=$!
        sleep 3
        
        if curl -f -s http://localhost:8000/knowledge-graph.html > /dev/null; then
          echo "✅ Python server works"
        else
          echo "❌ Python server failed"
          exit 1
        fi
        
        kill $SERVER_PID 2>/dev/null || true
        
        echo "Testing Node.js server..."
        timeout 10s node server.js &
        SERVER_PID=$!
        sleep 3
        
        if curl -f -s http://localhost:8000/knowledge-graph.html > /dev/null; then
          echo "✅ Node.js server works"
        else
          echo "❌ Node.js server failed"
          exit 1
        fi
        
        kill $SERVER_PID 2>/dev/null || true
        
        echo "✅ All release assets validated successfully"
